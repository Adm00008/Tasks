plot(1,1, xlim=c(0, 400), ylim=c(1, 8.5), xlab="", ylab="", type="n", yaxt="n")
source("~/Desktop/Evolution/Tasks/Task_04/task04.r")
source("~/Desktop/Evolution/Tasks/Task_04/task04.r")
source("~/Desktop/Evolution/Tasks/Task_04/task04.r")
source("~/Desktop/Evolution/Tasks/Task_04/task04.r")
lines(1:maxtime, no_diff_alleles2[s,], type = 'l', lwd = 3, col = col[2])
no_individuals <- 1000
init_no_alleles <- 100 # initial number of unique alleles
maxtime <- 100
no_remove <- 800 # number of individuals consumed each timestep
init_escape_prob <- 0.5 # initial probability of escaping attack
no_simulations <- 10
maxescape <- 0.95
rate_escape_prob <- 0.75 # proportional increase in escape probability
no_diff_alleles <- array(0, c(no_simulations, maxtime))
for (s in 1:no_simulations) {
escape <- array(init_escape_prob, c(no_individuals, maxtime))
alleles <- array(0, c(no_individuals, maxtime))
alleles[,1] <- sample(1:init_no_alleles, no_individuals, replace=T)
no_diff_alleles[s,1] <- length(unique(alleles[,1]))
for (t in 2:maxtime) {
# remove no_remove individuals: loop over attacks
successful_attacks <- 0
removed <- NULL
repeat {
attack <- sample(1:no_individuals, 1) # random choice of prey
if (runif(1) >= escape[attack,t-1]) { # successful attack
successful_attacks <- successful_attacks + 1
removed <- c(attack,removed)
} else { # unsuccessful attack: increase in escape probability with learning
escape[attack,t] <- min(maxescape,(1+rate_escape_prob)*escape[attack,t-1])
}
if (successful_attacks >= no_remove) { break }
}
# determining indices of not removed individuals
b <- 1:no_individuals
staying <- b [! b %in% removed]
# no_remove of the remaining individuals reproduce, to keep population size constant
reproducing <- sample(staying, no_remove, replace=T)
alleles[,t] <- alleles[,t-1]
alleles[removed,t] <- alleles[reproducing,t]
escape[removed,t] <- rep(init_escape_prob, no_remove) # new individuals have no escape experience
# calculate number of unique alleles
no_diff_alleles[s,t] <- length(unique(alleles[,t]))
} # loop over t
} # loop over s
rate_escape_prob <- 0
no_diff_alleles2 <- array(0, c(no_simulations, maxtime))
for (s in 1:no_simulations) {
escape <- array(init_escape_prob, c(no_individuals, maxtime))
alleles <- array(0, c(no_individuals, maxtime))
alleles[,1] <- sample(1:init_no_alleles, no_individuals, replace=T)
no_diff_alleles2[s,1] <- length(unique(alleles[,1]))
for (t in 2:maxtime) {
# remove no_remove individuals: loop over attacks
successful_attacks <- 0
removed <- NULL
repeat {
attack <- sample(1:no_individuals, 1)
if (runif(1) >= escape[attack,t-1]) { # successful attack
successful_attacks <- successful_attacks + 1
removed <- c(attack,removed)
} else { # unsuccessful attack: increase in escape probability with learning
escape[attack,t] <- min(maxescape,(1+rate_escape_prob)*escape[attack,t-1])
}
if (successful_attacks >= no_remove) { break }
}
b <- 1:no_individuals
staying <- b [! b %in% removed]
# no_remove of the remaining individuals reproduce
reproducing <- sample(staying, no_remove, replace=T)
alleles[,t] <- alleles[,t-1]
alleles[removed,t] <- alleles[reproducing,t]
# calculate number of unique alleles
no_diff_alleles2[s,t] <- length(unique(alleles[,t]))
} # loop over t
} # loop over s
library("RColorBrewer")
col = brewer.pal(n = 3, name = "Paired")
ccex <- 1.5
ccex2 <- 1.5
xmax <- maxtime
ymax <- init_no_alleles
plot(1:maxtime, no_diff_alleles[1,], type = 'l', lwd = 3, col = col[1], xlab = 'Time', ylab = 'Number of different alleles', cex.axis = ccex, cex.lab = ccex, xlim = c(1, xmax), ylim = c(0, ymax))
lines(1:maxtime, no_diff_alleles2[1,], type = 'l', lwd = 3, col = col[2])
legend('bottomleft', c('with learning', 'without learning'), lty = 1, pch = -1, bty = 'o', lwd = 3, cex = ccex2, col = col)
for (s in 2:no_simulations) {
lines(1:maxtime, no_diff_alleles2[s,], type = 'l', lwd = 3, col = col[2])
lines(1:maxtime, no_diff_alleles[s,], type = 'l', lwd = 3, col = col[1])
setwd('/Users/adammcmillion/Evolution/Desktop/Tasks/Task_05')
file.create("task03.r")
list.files
setwd('/Users/adammcmillion/Evolution/Desktop/Tasks/Task_05')
setwd('/Users/adammcmillion/Evolution/Desktop/Tasks/Task_05')
setwd('/Users/adammcmillion/Evolution/Desktop/Tasks/Task_05')
coalescent.plot()
learnPopGen()
install.packages("learnPopGen")
coalescent.plot()
'coalescent.plot'
library learnPopGen::
library(learnPopGen)
coalescent.plot(n=10, ngen=20, colors=NULL)
coalescent.plot(n=10, ngen=20, colors=NULL)
coalescent.plot(n=10, ngen=20, colors=NULL)
library(adegent)
install.packages("adegenet")
install.packages("poppr")
install.packages("poppr")
install.packages("dplyr")
library(poppr)
library(adegent)
library(adegenet)
library(poppr)
library(dplyr)
install.packages("hierfstat")
install.packages("reshape2")
install.packages("ggplot2")
install.packages("RColorBrewer")
install.packages("scales")
library(hierfstat)
library(learnPopGen)
library(reshape2)
library(reshape2)
library(ggplot2)
library(RColorBrewer)
library(scales)
lobster <- read.csv("https://jonsmitchell.com/data/lobster_genotypes.csv")
lobster_wide<-reshape(lobster, idvar= c("ID", "Site"), timevar = "Locus", direction= "wide", sep="")
colnames(lobster_wide) <- gsub("Genotype", "", colnames(lobster_wide))
snpgeno<-lobster_wide[, 3:ncol(lobster_wide)]
snps_to_remove<-c("25580", "32362","41521","53889","65379","8953","21197","15531","22740","28357","33066","51507","53052","53263","21880","22323","22365")
snpgeno<- snpgeno[ !colnames(snpgeno)%n% snps_to_remove]
snpgeno<- snpgeno[, !colnames(snpgeno)%n% snps_to_remove]
snpgeno<- snpgeno[, !colnames(snpgeno)%in% snps_to_remove]
ind <- as.character(lobster_wide$ID)
ind <- as.character(lobster_wide$ID)
site<- as.character(lobster_wide$Site)
source("~/task05.R")
source("~/task05.R")
source("~/task05.R")
lobster_gen<- df2genind(snpgeno, ploidy=2, ind.names=ind, pop=site, sep="")
lobster_gen<-missingno(lobster_gen, type="geno", cutoff=0.20)
mlg(lobster_gen)
dups_lobster<-mlg.id(lobster_gen)
lob_dups<-c()
x<-1
for (i in dups_lobster){
if(length(dups_lobster[i]>1)
lob_dups[x]<- i
x<-x+1
}
if(length(dups_lobster[i]>1){
if(length(dups_lobster[i])>1{
if(length(dups_lobster[i])>1
lob_dups[x]<- i
lob_dups[x]<-i
x<-x+1
}
for (i in dups_lobster){
if(length(dups_lobster[i])>1{
for (i in dups_lobster){
if(length(dups_lobster[i])>1
lob_dups[x]<-i
}
for (i in dups_lobster){
if(length(dups_lobster[i]) >1
lob_dups[x]<-i
for (i in dups_lobster){
if(length(dups_lobster[i]) >1{
for (i in dups_lobster){
if (length(dups_lobster[i]) >1){
lob_dups[x]<-i
x<-x+1
}
for (i in dups_lobster){
if (length(dups_lobster[i]) >1){
lob_dups[x]<-i
x<-x+1
}
}
source("~/task05.R")
for (i in dups_lobster){
if (length(dups_lobster[i]) >1){
lob_dups[x]<-i
x<-x+1
}
}
lob_Nodups<- indNames(lobster_gen)[! indNames(lobster_gen) %in% lob_dups]
source("~/task05.R")
for (i in dups_lobster){
if (length(dups_lobster[i])>1){
lob_dups[x]<-i
x<-x+1
}
}
lob_Nodups<- indNames(lobster_gen)[! indNames(lobster_gen) %in% lob_dups]
lobster_gen<-lobster_gen[lob_Nodups, ]
summary(lobster_gen$pop)
basic_lobster<-basic.stats(lobster_gen, diploid=TRUE)
basic_lobster<-basic. stats(lobster_gen, diploid=TRUE)
basic_lobster <- basic. stats(lobster_gen, diploid=TRUE)
basic _lobster <- basic.stats(lobster_gen, diploid=TRUE)
basic_lobster<- basic.stats(lobster_gen, diploid=TRUE)
warnings()
x<- x+1
for (i in dups_lobster){
if (length(dups_lobster[i])>1){
lob_dups[x]<-i
x<- x+1
}
}
lob_Nodups<- indNames(lobster_gen)[! indNames(lobster_gen) %in% lob_dups]
lobster_gen<-lobster_gen[lob_Nodups, ]
summary(lobster_gen$pop)
basic_lobster<- basic.stats(lobster_gen, diploid=TRUE)
basic_lobster<- basic.stats(lobster_gen, diploid=TRUE)
library(stats4)
basic_lobster<- basic.stats(lobster_gen, diploid=TRUE)
install.packages("basic.stat")
basic_lobster<- basic.stats(lobster_gen, diploid=TRUE)
basic_lobster<- basic .stats(lobster_gen, diploid=TRUE)
library(learnPopGen)
coalescent.plot(n=10, ngen=20, colors=NULL)
library(adegenet)
library(poppr)
library(dplyr)
library(hierfstat)
library(reshape2)
library(ggplot2)
library(RColorBrewer)
library(scales)
lobster <- read.csv("https://jonsmitchell.com/data/lobster_genotypes.csv")
lobster_wide<-reshape(lobster, idvar=c("ID", "Site"), timevar = "Locus", direction= "wide", sep="")
colnames(lobster_wide) <- gsub("Genotype", "", colnames(lobster_wide))
snpgeno<-lobster_wide[, 3:ncol(lobster_wide)]
snps_to_remove<-c("25580", "32362","41521","53889","65379","8953","21197","15531","22740","28357","33066","51507","53052","53263","21880","22323","22365")
snpgeno<- snpgeno[, !colnames(snpgeno)%in% snps_to_remove]
ind <- as.character(lobster_wide$ID)
site<- as.character(lobster_wide$Site)
lobster_gen<- df2genind(snpgeno, ploidy=2, ind.names=ind, pop=site, sep="")
lobster_gen<-missingno(lobster_gen, type="geno", cutoff=0.20)
mlg(lobster_gen)
dups_lobster<-mlg.id(lobster_gen)
lob_dups<-c()
x<-1
for (i in dups_lobster){
if (length(dups_lobster[i])>1){
lob_dups[x]<-i
x<- x+1
}
}
lob_Nodups<- indNames(lobster_gen)[! indNames(lobster_gen) %in% lob_dups]
lobster_gen<-lobster_gen[lob_Nodups, ]
summary(lobster_gen$pop)
basic_lobster<- basic.stats(lobster_gen, diploid = TRUE)
Ho_lobster<-round(apply(basic_lobster$Ho, MARGIN=2, FUN= mean, na. rm=TRUE), digits=3)
Ho_lobster<-round(apply(basic_lobster$Ho, MARGIN=2, FUN= mean,na.rm=TRUE), digits=3)
He_lobster<- round(apply(basic_lobster$Hs, MARGIN=2, FUN=mean,na.rm=TRUE), digits=3)
par(mar=c(4,4,1,1), las=1, mgp=c(2, 0.25, 0), tck=-0.005, cex.lab=1.25)
plot(He_lobster, Ho_lobster, xlab="expected H", ylab="observed H", pch=21, bg="gray", xlim=c(0.32, 0.405), ylim=c(0.32, 0.405))
abline(0.1,lty=3)
abline(0,1,lty=3)
abline(lm(Ho_lobster~He_lobster), lty=2, lwd=1.25, col='red')
Fis<-apply(basic_lobster$Fis, MARGIN=2, FUN=mean, na.rm=TRUE)
lobster_gen_sub<-popsub(lobster_gen, sublist=c("Ale","Ber","Brd","Pad", "Sar17","Vig"))
lobster_fst<-genet.dist(lobster_gen_sub, method="WC84") %>% round(digits=3)
lab_order<-c("Ber","Brd","Pad","Vig","Sar17","Ale")
fst.mat<-as.matrix(lobster_fst)
fst.mat1<-fst.mat[lab_order,]
fst.mat2<-fst.mat1[,lab_order]
ind<-which(upper.tri(fst.mat2), arr.ind=TRUE)
fst.df<- data.frame(Site1=dimnames(fst.mat2)[[2]][ind[,2]],Site2=dimnames(fst.mat2)[[1]][ind[,1]],Fst=fst.mat2[ind])
fst.mat<-as.matrix(lobster_fst)
fst.mat1<-fst.mat[lab_order,]
fst.mat2<-fst.mat1[,lab_order]
ind<-which(upper.tri(fst.mat2), arr.ind=TRUE)
fst.df<-data.frame(Site1=dimnames(fst.mat2)[[2]][ind[,2]], Site2=dimnames(fst.mat2)[[1]][ind[,1]], Fst=fst.mat2[ind])
fst.df$Site1<-factor(fst.df$Site1, levels=unique(fst.df$Site1))
fst.df$Site2<-factor(fst.df$Site2, levels=unique(fst.df$Site2))
fst.df$Fst[fst.df$Fst<0]<-0
fst.label<-expression(italic("F")[ST])
mid<-max(fst.df$Fst)/2
ggplot(data=fst.df, aes(x=Site1, y=Site2, fill=Fst))+geom_title(colour="black")+geom_text(aes(label=Fst), color="black", size=3)+ scale_fill_gradient2(low="blue",mid="pink", high="red", midpoint=mid, name=fst.label, limits=c(0,max(fst.df$Fst)),breaks=c(0,0.05,0.10,0.15))+scale_x_discrete(expand=c(0,0))+scale_y_discrete(expand=c(0,0), position="right")+theme(axis.text=element_text(colour="black",soze=10,face="bold"), axis.title=element_blank(), panel.grid=element_blank(),panel.background=element_blank(),legend.position="right",legend.title=element_text(size=14, face="bold"),legend.text=element_text(size=10))
ggplot(data=fst.df, aes(x=Site1, y=Site2, fill=Fst))+geom_tile(colour="black")+geom_text(aes(label=Fst), color="black", size=3)+ scale_fill_gradient2(low="blue",mid="pink", high="red", midpoint=mid, name=fst.label, limits=c(0,max(fst.df$Fst)),breaks=c(0,0.05,0.10,0.15))+scale_x_discrete(expand=c(0,0))+scale_y_discrete(expand=c(0,0), position="right")+theme(axis.text=element_text(colour="black",soze=10,face="bold"), axis.title=element_blank(), panel.grid=element_blank(),panel.background=element_blank(),legend.position="right",legend.title=element_text(size=14, face="bold"),legend.text=element_text(size=10))
ggplot(data=fst.df, aes(x=Site1, y=Site2, fill=Fst))+geom_tile(colour="black")+geom_text(aes(label=Fst), color="black", size=3)+ scale_fill_gradient2(low="blue",mid="pink", high="red", midpoint=mid, name=fst.label, limits=c(0,max(fst.df$Fst)),breaks=c(0,0.05,0.10,0.15))+scale_x_discrete(expand=c(0,0))+scale_y_discrete(expand=c(0,0), position="right")+theme(axis.text=element_text(color="black",size=10,face="bold"), axis.title=element_blank(), panel.grid=element_blank(),panel.background=element_blank(),legend.position="right",legend.title=element_text(size=14, face="bold"),legend.text=element_text(size=10))
debugSource("~/task05.R")
d <- subset(d, d$grow > -0.1)
d <- read.table("dfr100.txt", header = T, sep = "\t")
debugSource("~/task05.R")
x<-rnorm(100,mean=0,sd=4)
x<-rnorm(400,mean=0,sd=2)
var(x)
mean(x)
y=((x*4)+2)+runif(400,0,0.1)
pdf("plot1.pdf")
plot(x,y)
abline(lm(y~x),col='orange')
dev.off()
coef(lm(y~x))
z<-c()
x<-rnorm(400,mean=4,sd=2)
l<-coef(lm(z[1:400]~y)
for(i in 1:400){
for(i in 1:400){
for(i in 1:400){
y<-(x*z[i]+2+(rnorm(400,0,0.1))
setwd("/Users/adammcmillion/Desktop/Evolution/Tasks")
x<-rnorm(400,mean=4,sd=2)
for(i in 1:400){
y<-(x*z[i]+2+(rnorm(400,0,0.1))
plot(x,y)
setwd("/Users/adammcmillion/Desktop/Evolution/Tasks")
pdf("plot1.pdf")
for(i in 1:400){
y<-(x*z[i]+2+(rnorm(400,0,0.1))
l<-coef(lm(z[1:400]~y))
for(i in 1:400){
y<-(x*z[i]+2+(rnorm(400,0:0.1))
l<-coef(lm(z[1:400]~y))
for(i in 1:400){
z[i]<-runif(1)
y<-(x*z[i])+2+(rnorm(400,0:0.1))
l<-coef(lm(z[1:400]~y))
}
plot(z[1:400],y)
abline(lm(y~z[1:400]))
coef(lm(y~z))
pdf('plot2.pdf')
plot(c(z,0.1962))
dev.off()
library(ggplot2)
distance<-200
horse<-('speed','feed','travel')
horse<-c('speed','feed','travel')
race<-sample(horse,size=iteration,replace=TRUE)
monty_hall<-function(iteration){
race<-sample(horse,size=iteration,replace=TRUE)
i=2:iteration
win_total<-ifelse(horse=='speed',1,0)
lose_total<-ifelse(horse=='speed',0,1)
win_prob<-cumsum(win_total)/i
lose_prob<-cumsum(lose_total)/i
results<-data.frame(i=i,race=race,win_total=win_total,lose_total=lose_total,win_prob=win_prob,lose_prob=lose_prob
return(results)
results<-data.frame(i=i,race=race,win_total=win_total,lose_total=lose_total,win_prob=win_prob,lose_prob=lose_prob)
results<-data.frame(i=i,race=race,win_total=win_total,lose_total=lose_total,win_prob=win_prob,lose_prob=lose_prob)
return(results)
monty_hall<-function(iteration){
race<-sample(horse,size=iteration,replace=TRUE)
i=2:iteration
win_total<-ifelse(horse=='speed',1,0)
lose_total<-ifelse(horse=='speed',0,1)
win_prob<-cumsum(win_total)/i
lose_prob<-cumsum(lose_total)/i
results<-data.frame(i=i,race=race,win_total=win_total,lose_total=lose_total,win_prob=win_prob,lose_prob=lose_prob)
return(results)
}
results<-monty_hall(times)
results<-data.frame(i=i,race=race,win_total=win_total,lose_total=lose_total,win_prob=win_prob,lose_prob=lose_prob)
race<-sample(horse,size=iteration,replace=TRUE)
monty_hall<-function(Iteration){
race<-sample(horse,size=iteration,replace=TRUE)
i=2:iteration
win_total<-ifelse(horse=='speed',1,0)
lose_total<-ifelse(horse=='speed',0,1)
win_prob<-cumsum(win_total)/i
lose_prob<-cumsum(lose_total)/i
results<-data.frame(i=i,race=race,win_total=win_total,lose_total=lose_total,win_prob=win_prob,lose_prob=lose_prob)
return(results)
}
x<-rnorm(400,mean=0,sd=2)
var(x)
mean(x)
y=((x*4)+2)+runif(400,0,0.1)
pdf("plot1.pdf")
plot(x,y)
abline(lm(y~x),col='orange')
dev.off()
coef(lm(y~x))
z<-c()
x<-rnorm(400,mean=4,sd=2)
for(i in 1:400){
z[i]<-runif(1)
y<-(x*z[i])+2+(rnorm(400,0:0.1))
l<-coef(lm(z[1:400]~y))
}
plot(z[1:400],y)
abline(lm(y~z[1:400]))
coef(lm(y~z))
pdf('plot2.pdf')
plot(c(z,0.1962))
dev.off()
library(ggplot2)
distance<-200
horse<-c('speed','feed','travel')
monty_carll<-function(Iteration){
race<-sample(horse,size=iteration,replace=TRUE)
i=2:iteration
win_total<-ifelse(horse=='speed',1,0)
lose_total<-ifelse(horse=='speed',0,1)
win_prob<-cumsum(win_total)/i
lose_prob<-cumsum(lose_total)/i
results<-data.frame(i=i,race=race,win_total=win_total,lose_total=lose_total,win_prob=win_prob,lose_prob=lose_prob)
return(results)
}
results<-monty_carll(times)
results<-data.frame(i=i,race=race,win_total=win_total,lose_total=lose_total,win_prob=win_prob,lose_prob=lose_prob)
race<-sample(horse,size=iteration,replace=TRUE)
race<-sample(horse,size=Iteration,replace=TRUE)
carl<-function(space)
race<-sample(horse,size=space,replace=TRUE)
i=2:space
carl<-function(space){
race<-sample(horse,size=space,replace=TRUE)
i=2:space
win_total<-ifelse(horse=='speed',1,0)
lose_total<-ifelse(horse=='speed',0,1)
win_prob<-cumsum(win_total)/i
lose_prob<-cumsum(lose_total)/i
results<-data.frame(i=i,race=race,win_total=win_total,lose_total=lose_total,win_prob=win_prob,lose_prob=lose_prob)
return(results)
}
results<-carll(times)
results<-carl(times)
results<-carl(space)
results<-carl(time)
results<-carl(times)
results<-carl(feed)
results<-carl(horse)
results<-carl(times)
results<-data.frame(i=i,race=race,win_total=win_total,lose_total=lose_total,win_prob=win_prob,lose_prob=lose_prob)
race<-sample(horse,size=times,replace=TRUE)
race<-sample(horse,replace=TRUE)
results<-data.frame(i=i,race=race,win_total=win_total,lose_total=lose_total,win_prob=win_prob,lose_prob=lose_prob)
win_total<-ifelse(horse=='speed',1,0)
lose_total<-ifelse(horse=='speed',0,1)
win_prob<-cumsum(win_total)/i
lose_prob<-cumsum(lose_total)/i
results<-data.frame(i=i,race=race,win_total=win_total,lose_total=lose_total,win_prob=win_prob,lose_prob=lose_prob)
summary<-table(results$race)
df_summary<-data.frame(label=names(summary), count=matrix(summary))
print(df_summary)
barplot(c(sum(as.numeric(results$win_total)),sum(as.numeric(results$lose_total))), beside=TRUE,xlab="win",ylab="lose")
source("~/Desktop/Evolution/Tasks/Task10.R")
source("~/Desktop/Evolution/Tasks/Task10.R")
carl<-function(times){
race<-sample(horse,replace=TRUE)
i=2:times
win_total<-ifelse(horse=='speed',1,0)
lose_total<-ifelse(horse=='speed',0,1)
win_prob<-cumsum(win_total)/i
lose_prob<-cumsum(lose_total)/i
results<-data.frame(i=i,race=race,win_total=win_total,lose_total=lose_total,win_prob=win_prob,lose_prob=lose_prob)
return(results)
}
source("~/Desktop/Evolution/Tasks/Task10.R")
x<-rnorm(100,mean=0,sd=4)
var(x)
mean(x)
y=((x*5)+2)+runif(100,0,0.1)
pdf("plot1.pdf")
plot(x,y)
abline(lm(y~x),col='orange')
dev.off()
coef(lm(y~x))
x<-rnorm(100,mean=5,sd=4)
for(i in 1:400){
z[i]<-runif(1)
y<-(x*z[i])+2+(rnorm(400,0:0.1))
l<-coef(lm(z[1:400]~y))
}
x<-rnorm(100,mean=5,sd=4)
for(i in 1:100){
z[i]<-runif(1)
y<-(x*z[i])+2+(rnorm(100,0:0.1))
l<-coef(lm(z[1:100]~y))
}
plot(z[1:100],y)
abline(lm(y~z[1:400]))
plot(z[1:100],y)
abline(lm(y~z[1:100]))
coef(lm(y~z))
pdf('plot2.pdf')
distance<-10000
carl<-function(times){
race<-sample(horse,replace=TRUE)
i=2:times
win_total<-ifelse(horse=='speed',1,0)
lose_total<-ifelse(horse=='speed',0,1)
win_prob<-cumsum(win_total)/i
lose_prob<-cumsum(lose_total)/i
results<-data.frame(i=i,race=race,win_total=win_total,lose_total=lose_total,win_prob=win_prob,lose_prob=lose_prob)
return(results)
}
results<-carl(times)
Monty_hall<-function(times){
race<-sample(horse,replace=TRUE)
i=2:times
win_total<-ifelse(horse=='speed',1,0)
lose_total<-ifelse(horse=='speed',0,1)
win_prob<-cumsum(win_total)/i
lose_prob<-cumsum(lose_total)/i
results<-data.frame(i=i,race=race,win_total=win_total,lose_total=lose_total,win_prob=win_prob,lose_prob=lose_prob)
return(results)
}
results<-Monty_hall(times)
summary<-table(results$race)
df_summary<-data.frame(label=names(summary), count=matrix(summary))
print(df_summary)
barplot(c(sum(as.numeric(results$win_total)),sum(as.numeric(results$lose_total))), beside=TRUE,xlab="win",ylab="lose")
source("~/Desktop/Evolution/Tasks/Task_10/Task10.R")
